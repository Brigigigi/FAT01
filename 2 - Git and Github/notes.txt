Git - Version Control (Most used and Most popular version control)
    - Keeping track of changes
    - Undoing mistakes
    - Experimenting Safely
    - Collaborating with other developers
Repositories (Repo's)
    - Container for a project you want to track with Git
    - Local or Remote
        > Local - inside personal machine
        > Remote - inside github
            > Create a repository on github
            > Public / Private 
            > "create a new repo on the cl" or "push an existing repo from the cl"
                - if you already have a local repo, you can just push the local repo to connect to github to also become a remote repo
                - copy firs line to local machine (vscode)
                - check if connection is secure >> " git remote -v "
                - " git branch -M main " >> master's branch name will be " main " in the remote repo or in github
                - copy the second line (git branch -M main) to local machines terminal to rename the master branch
                - " git push -u origin main " >> "push" means upload from local repo to remote repo >> " -u origin " indicates the link where to upload/push >> " main " means to upload/push from local to remote repo or github server
                -  cop " git push -u origin main " to local terminal >> used only once just to upload from local to remote repo
                - for the second time after changes just the " git push " command
                - it might ask you sign in or not


    - There can be multiple repos for different projects on your computer
Frontend - The visible version of a webpage

Turn a normal folder into a repository
    - use " git init " command >> initialize a repository >> ability to track changes
    - " U " means Untracked - It means that all of the files inside that repository, git is not yet tracking these files.
    - Goal is to let the repository to track the files within it.
    - " git status " command >> tells the status of all files and folders
    - "Git 3 Stage Architecture"
        - 1st - "Working Area"  - the repository itself and making functionalities
        - 2nd - "Staging Area" - the preparation stage > prepare all the changes - The command >> " git add " >> " git add . " >> allows to add files to staging area
            " U " > Untracked, " A " > Added >> From working area to staging area
        - 3rd - "Commit Stage" - The command >> " git commit " >>> Saving the state of the file. Hence making versions of every changes you make. >> " git commit -m "Description of the changes made" " >> m > message
            - These are snapshopts of the different stages of your project.
            - You can go back to these snapshots anytime you need to.
            - Reduce the risk of losing progress on your project.

Additional notes:
    - config git >> " git config --global user.name "username" "
        >> " git config --global user.email "email" "
        >> git config user.name/user.email to check


" git log " command >> to check for the history of changes
" Commit Hash" unique id for the changes
" Author " and " Date "
" git log --oneline " >> Display git log in a single line >> show firs 7 digits of commit Hash

Main Codebase - available to the public
(master) - master branch
(working tree is clean)

Branches
    - Master Branch
        - Starting branch
        - Stable version of your code
        - Branch that is published 

Additional Branches - Will not affect the master branch / main codebase - can be merged to the master/main branch
    - Copy state of code in master branch into a new Branch
    - Isolated environment where we can try out features and changes
    - If deleted or modified, these will not affect the master branch

" git branch -a " command - list the branches
    - color " green " indicates you are inside that particular branch

" git branch <branch name> " command - creates a new branch
" git checkout <branch name you want to jump into> " command - jumps to the branch you want to get into

Green colored vertical line beside indicates changes are made in a different branch

Anything changes made in this seperate branch will not affect/visible in the main branch

Merge branches into the master branch
    > Should be in the master branch first
    > " git merge [branch-name] " command

After merging, feature/branch made can be deleted
    > should be in the master branch
    > " git branch -d [branch-name] " command - deletes a particular branch